// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Data;

#nullable disable

namespace TaskManager.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240625104053_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TaskManager.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 18, 15, 40, 53, 155, DateTimeKind.Local).AddTicks(2861),
                            Description = "Setup Admin Dashboard",
                            DueDate = new DateTime(2024, 6, 24, 15, 40, 53, 155, DateTimeKind.Local).AddTicks(2901),
                            Status = "Completed",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 6, 23, 15, 40, 53, 155, DateTimeKind.Local).AddTicks(2907),
                            Description = "Create Initial Users",
                            DueDate = new DateTime(2024, 6, 28, 15, 40, 53, 155, DateTimeKind.Local).AddTicks(2909),
                            Status = "InProgress",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 6, 27, 15, 40, 53, 155, DateTimeKind.Local).AddTicks(2913),
                            Description = "Review System Logs",
                            DueDate = new DateTime(2024, 7, 2, 15, 40, 53, 155, DateTimeKind.Local).AddTicks(2915),
                            Status = "Pending",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TaskManager.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            PasswordHash = new byte[] { 14, 23, 228, 22, 188, 176, 130, 155, 219, 3, 105, 43, 212, 204, 70, 187, 132, 83, 157, 139, 4, 177, 63, 168, 13, 95, 122, 118, 221, 215, 37, 134, 31, 154, 222, 250, 248, 100, 22, 176, 150, 152, 113, 239, 9, 168, 81, 172, 204, 157, 246, 80, 151, 162, 35, 251, 21, 97, 241, 92, 141, 64, 143, 134 },
                            PasswordSalt = new byte[] { 111, 129, 151, 106, 122, 80, 123, 120, 180, 13, 178, 37, 65, 103, 6, 197, 138, 114, 72, 138, 104, 18, 4, 4, 229, 80, 17, 74, 37, 140, 67, 186, 16, 248, 46, 249, 51, 38, 201, 239, 55, 48, 205, 215, 240, 245, 181, 186, 69, 28, 73, 162, 54, 161, 203, 166, 133, 185, 189, 79, 101, 222, 96, 153, 89, 86, 161, 223, 16, 200, 240, 171, 51, 108, 62, 44, 46, 75, 246, 181, 56, 218, 146, 71, 218, 228, 30, 149, 189, 236, 21, 2, 12, 27, 0, 146, 65, 63, 171, 221, 199, 175, 203, 154, 175, 51, 111, 32, 109, 193, 221, 172, 191, 182, 24, 109, 144, 252, 31, 218, 103, 123, 160, 199, 92, 182, 164, 98 },
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TaskManager.Models.Task", b =>
                {
                    b.HasOne("TaskManager.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManager.Models.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
